{
  "name": "fantasy-lenses",
  "version": "0.1.1",
  "description": "Composable, immutable getters and setters.",
  "main": "lens.js",
  "dependencies": {
    "fantasy-options": "0.0.1",
    "daggy": "0.0.1",
    "fantasy-stores": "~0.1.0"
  },
  "devDependencies": {
    "nodeunit": "~0.8.1"
  },
  "scripts": {
    "test": "$(npm bin)/nodeunit test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/puffnfresh/fantasy-lenses.git"
  },
  "keywords": [
    "fantasyland",
    "lens",
    "lenses",
    "category"
  ],
  "author": {
    "name": "Brian McKenna"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/puffnfresh/fantasy-lenses/issues"
  },
  "readme": "# Fantasy Lenses\n\nLenses are composable, immutable getters and setters. Composable in\nthat they allow updating of nested data structures. Immutable in that\nthe setters return copies of the whole data structure.\n\n## Examples\n\n### Nested updating\n\n```javascript\nvar person = {\n        name: \"Brian McKenna\",\n        location: {\n            number: 1006,\n            street: \"Pearl St\",\n            postcode: 80302\n        }\n    },\n    objectLens = require('fantasy-lenses').Lens.objectLens,\n    locationLens = objectLens('location'),\n    numberLens = objectLens('number'),\n    store = locationLens.andThen(numberLens).run(person);\n\nconsole.log(store.get());\n// 1006\n\nconsole.log(store.set(1007));\n// { name: 'Brian McKenna',\n//   location: { number: 1007, street: 'Pearl St', postcode: 80302 } }\n```\n\n### Accessing optional fields\n\n```javascript\nvar data = [{\n        name: \"First record\",\n        config: {\n            type: 2\n        }\n    }, {\n        description: \"Hello world\",\n        config: {\n            type: 3\n        }\n    }, {\n        name: \"Third record\"\n    }],\n    objectLens = require('fantasy-lenses').PartialLens.objectLens,\n    configLens = objectLens('config'),\n    typeLens = objectLens('type'),\n    configTypeLens = configLens.andThen(typeLens);\n\nconsole.log(data.filter(function(o) {\n    return configTypeLens.run(o).fold(\n        function(store) {\n            // Get the field's content\n            return store.get() == 2;\n        },\n        function() {\n            // Didn't find field\n            return false;\n        }\n    );\n}));\n// [ { name: 'First record', config: { type: 2 } } ]\n```\n",
  "readmeFilename": "README.md",
  "_id": "fantasy-lenses@0.1.1",
  "_from": "fantasy-lenses@"
}
