var Option = require('fantasy-options'),

    pl = require('./').PartialLens,
    o = pl.objectLens,
    a = pl.arrayLens,

    validations = [
        // a must be a Number
        o('a').andThen(isTypeOf('number')),
        // b must be a Boolean
        o('b').andThen(isTypeOf('boolean')),
        // c must be a String
        o('c').andThen(isTypeOf('string')),
        // d.e.f[0] must be equal to 1
        o('d').andThen(o('e')).andThen(o('f')).andThen(a(1)).andThen(isEqual(2))
    ];

// PartialLens for checking typeof a value
function isTypeOf(t) {
    return pl(function(target) {
        return typeof target == t ? pl.id().run(target) : Option.None;
    });
}

// PartialLens for checking equality of a value
function isEqual(e) {
    return pl(function(target) {
        return target == e ? pl.id().run(target) : Option.None;
    });
}

// Checks if an Option is Some (i.e. not None)
function isSome(o) {
    return o.fold(
        function(s) {
            return true;
        },
        function() {
            return false;
        }
    );
}

// Array.prototype.map
function map(a, f) {
    var r = [],
        i;

    for(i = 0; i < a.length; i++) {
        r[i] = f(a[i]);
    }

    return r;
}

// Array.prototype.reduce
function reduce(a, f, o) {
    var r = o,
        i;

    for(i = 0; i < a.length; i++) {
        r = f(r, a[i]);
    }

    return r;
}

// &&
function and(a, b) {
    return a && b;
}

// Runs all validations against an object
function valid(o) {
    return reduce(
        map(validations, function(v) {
            return isSome(v.run(o));
        }),
        and,
        true
    );
}

// a is not a Number
console.log(valid({
    a: {},
    b: true,
    c: "three",
    d: {
        e: {
            f: [1, 2, 3]
        }
    }
}));

// c is not a String
console.log(valid({
    a: 1,
    b: true,
    c: 0,
    d: {
        e: {
            f: [1, 2, 3]
        }
    }
}));

// d.e.f[1] is not 2
console.log(valid({
    a: 1,
    b: true,
    c: "three",
    d: {
        e: {
            f: [1, 3, 3]
        }
    }
}));

// Valid
console.log(valid({
    a: 1,
    b: true,
    c: "three",
    d: {
        e: {
            f: [1, 2, 3]
        }
    }
}));
