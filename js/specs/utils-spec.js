// Generated by LiveScript 1.2.0
var t, _, helpers, Option;
t = require('./../utilities/utilities');
_ = require('./../../node_modules/lodash/lodash');
helpers = require('./../../node_modules/fantasy-helpers/fantasy-helpers');
Option = require('./../../node_modules/fantasy-options/option');
describe('How the utilities are used in project:', function(){
  describe('The function isWholeNumber', function(){
    var x$;
    x$ = it;
    x$('should return true when a whole number is given', function(){
      expect(t.isWholeNumber(3)).toBe(true);
    });
    x$('should return false when given number which is not a whole number', function(){
      expect(t.isWholeNumber(3.14)).toEqual(false);
    });
    x$('should return false when given an item which is not a number', function(){
      expect(t.isWholeNumber('3')).toEqual(false);
    });
  });
  describe('The function toFlatArray', function(){
    var x$;
    x$ = it;
    x$('should convert arguments to array and flatten array', function(){
      var test;
      test = function(){
        return t.toFlatArray(arguments);
      };
      expect(test(1, [2])).toEqual([1, 2]);
    });
  });
  describe('The function complement', function(){
    var x$;
    x$ = it;
    x$('should negate a function.', function(){
      var isNotString;
      isNotString = t.complement(_.isString);
      expect(isNotString(0)).toBe(true);
      expect(isNotString('s')).toBe(false);
    });
  });
  describe('The function flip', function(){
    var x$;
    x$ = it;
    x$('should reverse 2 arguments', function(){
      var test;
      test = t.flip(function(a, b){
        return a / b;
      });
      expect(test(1)(2)).toEqual(2);
      expect(test(2)(1)).toEqual(1 / 2);
    });
  });
  describe('The function sum', function(){
    var x$;
    x$ = it;
    x$('should add the elements in an array', function(){
      expect(t.sum([1, 2, 3])).toEqual(6);
    });
    x$('should reject elements which are not numbers', function(){
      expect(t.sum([1, 2, '3', 'a'])).toEqual(6);
    });
  });
  describe('The function zipObjectT', function(){
    var x$;
    x$ = it;
    x$('should map an array to a key and value functions and return an object', function(){
      expect(t.zipObjectT(_.identity, function(){
        return ', world!';
      }, ['Hello'])).toEqual({
        Hello: ', world!'
      });
    });
  });
  describe('The function not', function(){
    var x$;
    x$ = it;
    x$('should return false when given true', function(){
      expect(t.not(true)).toBe(false);
    });
    x$('should return true when given false', function(){
      expect(t.not(false)).toBe(true);
    });
  });
  describe('The function invoke', function(){
    var x$;
    x$ = it;
    x$('should invoke a method with a single argument', function(){
      expect(t.invoke('toLowerCase')('HELLO')).toEqual('hello');
      expect(t.invoke('toLowerCase')('HELLO')).not.toEqual('Hello');
    });
  });
  describe('The function isLikeNumber', function(){
    var x$;
    x$ = it;
    x$('should determine if the string is a number', function(){
      expect(t.isLikeNumber('7')).toBe(true);
    });
    x$('should determine if the string is not a number', function(){
      expect(t.isLikeNumber('k')).toBe(false);
    });
  });
  describe('The function isArrayOf', function(){
    var x$;
    x$ = it;
    x$('should determine if array is all single type', function(){
      var a;
      a = [1, 2, 3, 4];
      expect(t.isArrayOf(_.isNumber)(a)).toBe(true);
    });
    x$('should determine if array is not all a single type', function(){
      var b;
      b = [1, 2, 3, 'a'];
      expect(t.isArrayOf(_.isNumber)(b)).toBe(false);
    });
  });
  describe('The function isOptionOf', function(){
    var x$, isOptionOfNumber;
    x$ = it;
    isOptionOfNumber = t.isOptionOf(_.isNumber);
    x$('should return true when it is an option of specified type', function(){
      var some;
      some = Option.Some(1);
      expect(isOptionOfNumber(some)).toBe(true);
    });
    x$('should return true when it is an option of none', function(){
      var none;
      none = Option.None;
      expect(isOptionOfNumber(none)).toBe(true);
    });
    x$('should return false when it is not an option', function(){
      var any;
      any = 1;
      expect(isOptionOfNumber(any)).toBe(false);
    });
    x$('should return false when it is an option but not the right type', function(){
      var someBadType;
      someBadType = Option.Some('I am a string');
      expect(isOptionOfNumber(someBadType)).toBe(false);
    });
  });
});