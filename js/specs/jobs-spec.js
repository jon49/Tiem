// Generated by LiveScript 1.2.0
var Option, ClockState, Job, Jobs;
Option = require('./../../node_modules/fantasy-options/option');
ClockState = require('./../models/ClockState');
Job = require('./../models/Job');
Jobs = require('./../models/Jobs');
describe('How Jobs model is used:', function(){
  var clockState, job, someJob, jobs;
  clockState = ClockState.create(new Date(), Option.None);
  job = Job.create(0, 'Comment', [clockState]);
  someJob = Option.Some(job);
  jobs = Jobs.create([job]);
  describe('The function `create`', function(){
    var x$;
    x$ = it;
    x$('should create an array of Job objects', function(){
      expect(Jobs.create([job])).toEqual({
        list: [{
          id: 0,
          comment: 'Comment',
          clockState: [clockState],
          ctor: 'Job'
        }],
        ctor: 'Jobs'
      });
    });
  });
  describe('The function `isSelf`', function(){
    var x$;
    x$ = it;
    x$('should determine if the object is Jobs', function(){
      expect(Jobs.isSelf(jobs)).toBe(true);
      expect(Jobs.isSelf({
        not: 'Self'
      })).toBe(false);
    });
  });
  describe('The function `with`', function(){
    var x$;
    x$ = it;
    x$('should return a new array with the exclusively added Job object', function(){
      var newSomeJob;
      newSomeJob = Option.Some(Job.create(1, 'Another Comment', [clockState]));
      expect(Jobs['with'](jobs, newSomeJob)).toEqual({
        list: [job, newSomeJob.getOrElse({})],
        ctor: 'Jobs'
      });
    });
  });
  describe('The function `get`', function(){
    var x$;
    x$ = it;
    x$('should return a Job Option object when given the id', function(){
      expect(Jobs.get(jobs, 0)).toEqual(someJob);
    });
  });
});