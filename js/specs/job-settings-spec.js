// Generated by LiveScript 1.2.0
var Option, JobSetting, JobSettings, Validation;
Option = require('./../../node_modules/fantasy-options/option');
JobSetting = require('./../models/JobSetting');
JobSettings = require('./../models/JobSettings');
Validation = require('./../../node_modules/fantasy-validations/validation');
describe('How Job Settings model is used:', function(){
  var jobSetting, someJobSetting, jobSettings;
  jobSetting = JobSetting.create(0, 'Job Name', true);
  someJobSetting = Option.Some(JobSetting.create(0, 'Job Name', true));
  jobSettings = JobSettings.create([jobSetting]);
  describe('The function `create`', function(){
    var x$;
    x$ = it;
    x$('should create an array of Job Setting objects', function(){
      expect(JobSettings.create([jobSetting])).toEqual({
        list: [{
          id: 0,
          name: 'Job Name',
          jobActive: true,
          ctor: 'JobSetting'
        }],
        ctor: 'JobSettings'
      });
    });
  });
  describe('The function `isSelf`', function(){
    var x$;
    x$ = it;
    x$('should determine if the object is JobSettings', function(){
      expect(JobSettings.isSelf(jobSettings)).toBe(true);
      expect(JobSettings.isSelf({
        not: 'Self'
      })).toBe(false);
    });
  });
  describe('The function `valid`', function(){
    var x$;
    x$ = it;
    x$('should return `Success` when valid id', function(){
      expect(JobSettings.valid(jobSettings, 0)).toEqual(Validation.Success(0));
    });
    x$('should return `Failure` when invalid id', function(){
      expect(JobSettings.valid(jobSettings, 1)).toEqual(Validation.Failure(['No such ID number exists']));
    });
  });
  describe('The function `valid`', function(){
    var x$;
    x$ = it;
    x$('should return `Success` when valid new name is given', function(){
      expect(JobSettings.valid(jobSettings, 'New Job Name')).toEqual(Validation.Success('New Job Name'));
    });
    x$('should return `Failure` when invalid new name is given', function(){
      expect(JobSettings.valid(jobSettings, '')).toEqual(Validation.Failure(['Job name must contain characters']));
    });
    x$('should return `Failure` when name already exists', function(){
      expect(JobSettings.valid(jobSettings, 'Job Name')).toEqual(Validation.Failure(['Job name already exists']));
    });
  });
  describe('The function `with`', function(){
    var x$;
    x$ = it;
    x$('should return a new array with the exclusively added JobSetting object', function(){
      var newJobSetting;
      newJobSetting = JobSetting.create(JobSetting.createId(), 'Job1', true);
      expect(JobSettings['with'](jobSettings, newJobSetting)).toEqual({
        list: [jobSetting, newJobSetting],
        ctor: 'JobSettings'
      });
    });
  });
  describe('The function `get`', function(){
    var x$;
    x$ = it;
    x$('should return a JobSetting Option object when given the id', function(){
      expect(JobSettings.get(jobSettings, 0)).toEqual(someJobSetting);
    });
    x$('should return a JobSetting Option object when given the job name', function(){
      expect(JobSettings.get(jobSettings, 'Job Name')).toEqual(someJobSetting);
    });
  });
});